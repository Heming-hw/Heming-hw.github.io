/* Information containing a single user's annotation that we want to be displayed in the table */
var annot_display = {}

/* Store multiple objects; This is the object to be persisted and store. */
var annot_displays = []

/* Login information, contains username, role, user_id. Struture is: user[username] = [user_id, role] 
* (the reason to use username as key is that I'm just simulating the authentication process here. Would be complicated
* if actually implement the process from scratch). 
*/
var users = {}
// var username, user_id, role

/* Store the annotation object generated by plugin api. */
var annots = []


/* a set of actions when annotation pannel is closed. 
@event the event object generated by annotation_comment api
*/
function event_action(event) {
    let detail= event.detail

    for (let i = 0; i < detail.comments.length; i ++) {
         // commetn made
        let comment = detail.comments[i]
        
        // // add infos that we want to display

        annot_display['Comment'] = comment.body
        
        // annot_display['Time'] = detail.comments[0].meta.datetime

        // original pacakge doesn't use local time; change to using JS built in time
        annot_display['Time'] = new Date().toLocaleDateString() + ", " + new Date().toLocaleTimeString();

        annot_display['User'] = comment.meta.user_name
        annot_display['comment_id'] = comment.id  // this is not displayed
        annot_display['annot_id'] = detail.id // this is the id for the whole thread (chain of comments)

        if ( !if_exist(annot_display) ) {
            // only save when the comment does not already exist (only save new comments)
            
            write(annot_display, annot_displays, "annot_displays")

            //add original annotations 
            write(detail, annots, 'annots') 
        }

    }
   

}


/* TO be pass in plugin option. 
* @return { user_id: user_id, user_name: username }
*/
function get_meta() {
    var curUser =localStorage.getItem("curUser")
    users = JSON.parse(localStorage.getItem("users"))
    // debug
    if (users == null) {alert('need to log in')}


    return {user_id: users[curUser], user_name: curUser}

}


/* Get the annots object created by plugin. */
function get_annots() {
    let annots = JSON.parse(localStorage.getItem('annots'))
    if (annots == null) {
        // to pass in when initializing plugin
        annots = []
    }
    return annots
}

/* to check if a comment already exists. 
* note: a reply B to a comment A has the same "annotation id", but 
* different "coment id"
* @reture a boolean
*/
function if_exist(comment) {
    let annot_displays = JSON.parse(localStorage.getItem("annot_displays"))
    if (annot_displays == null) {
        return false
    }

    let result = annot_displays.some(
        function (element) {
            // check if the comment exists in the annots list
            return element.comment_id === comment.comment_id
        }
    )

    return result
}


/* Write event info to storage with the name "dat". A persistance function. 
* @object  the object to be persisted. a dict {}
* @list   the list to store multiple objects. []
* @dat     the name of the persisted list
*/
function write(object, list, dat) {
        
    list = JSON.parse(localStorage.getItem(dat))
    if (list !== null) {
        var lastObj = list[list.length -1]
        if (JSON.stringify(lastObj) !== JSON.stringify(object) ) {
            // successfully retrived saved data, and if the new object is different
            // from the last one, save the data
            // use JSON.stringify to check the CONTENT of two objects. 
            list.push(object)
            
        } 
    } else {
        list = []
        list.push(object)
    }
    localStorage.setItem(dat, JSON.stringify(list))
}




export{ get_meta, get_annots, event_action}
